glacCharac <- read.csv(path_data&'\\'&glacCharacFile,header = T)
idCharac <- which(glacCharac$GLA==abbrev)
location<-abbrev                        # Location Name for outputs
StationName <- abbrev;                  # on-glacier Station
yearTS <- 2016                             # Year of measurements (if more than one give first year, will be disabled)
lat <- glacCharac$LAT[idCharac]
lon <- glacCharac$LON[idCharac]
################################################################################
# D1EB - point-scale debris Energy Balance Model
#
# d1Deb.R
#
# ReadMe:
# Based on Reid and Brock, 2010
# Code adapted for global debris EB point-scale model
#
# % NOTE: To run this successfully you will need the files:
#% 'isleapyear.m', 'debristemp.m', 'Lup.m', 'G.m', 'H.m', 'LE.m', 'P.m', 'loadEBdata.m' and 'diucyc.m'
#% They must all be saved in the same directory as this routine
#
# Created:          2018/02/05
# Latest Revision:  2017/02/05
#
# Jakob F Steiner| PhD candidate | Faculty of Geosciences | Universiteit Utrecht | Princetonlaan 8a, 3584 CB Utrecht
# Vening Meinesz building, room 4.30 | P.O. Box 80.115, 3508 TC Utrecht | j.f.steiner@uu.nl | www.uu.nl/staff/jfsteiner | www.mountainhydrology.org
################################################################################
# clear entire workspace (excl. packages)
rm(list = ls())
gc()
# define &-sign for pasting string-elements
'&' <- function(...) UseMethod('&')
'&.default' <- .Primitive('&')
'&.character' <- function(...) paste(...,sep='')
##################
# packages (if not installed yet: install.packages('examplePackage')
##################
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
library(foreach)
library(lubridate)
library(compare)
library(colorRamps)
library(data.table)
library(circular)
library(parallel)
library(snowfall)
library(truncnorm)
library(rlecuyer)
library(forecast)
##################
# File Paths/File Names and basic Settings
##################
climData <- 'AWS_Suldenferner_2016.csv'       # Climate Data File
paramData <- 'Params_5000.csv'              # Parameter Data File
##### only for
glacCharacFile <- 'GlacierCharac.csv'
abbrev <- 'SUL'
glacCharac <- read.csv(path_data&'\\'&glacCharacFile,header = T)
idCharac <- which(glacCharac$GLA==abbrev)
location<-abbrev                        # Location Name for outputs
StationName <- abbrev;                  # on-glacier Station
yearTS <- 2016                             # Year of measurements (if more than one give first year, will be disabled)
lat <- glacCharac$LAT[idCharac]
lon <- glacCharac$LON[idCharac]
EBCoreInput$T_a
EBCoreInput$T_a <- TSaggregate(climInput$Ta,climInput$Time_Str,60,yearTS,'mean')[,2] + 273.15;      	    # Air temperature (K)
cf <- c(-2,3,4,5,7,0,-8,-9,-18,-5)
xc <- c(0,cumsum(cf>0))
xc
hist(xc)
xc <- c(0,cumsum(cf<=0))
xc
diff(xc)
rle(diff(xc))
r<-rle(diff(xc))
r$lengths[r$values == 1]
xc <- diff(c(0,cumsum(rvec<=0)))
xc
rvec <- c(-2,3,4,5,7,0,-8,-9,-18,-5)
xc <- diff(c(0,cumsum(rvec<=0)))
################################################################################
# D1EB - point-scale debris Energy Balance Model
#
# d1Deb.R
#
# ReadMe:
# Based on Reid and Brock, 2010
# Code adapted for global debris EB point-scale model
#
# % NOTE: To run this successfully you will need the files:
#% 'isleapyear.m', 'debristemp.m', 'Lup.m', 'G.m', 'H.m', 'LE.m', 'P.m', 'loadEBdata.m' and 'diucyc.m'
#% They must all be saved in the same directory as this routine
#
# Created:          2018/02/05
# Latest Revision:  2017/02/05
#
# Jakob F Steiner| PhD candidate | Faculty of Geosciences | Universiteit Utrecht | Princetonlaan 8a, 3584 CB Utrecht
# Vening Meinesz building, room 4.30 | P.O. Box 80.115, 3508 TC Utrecht | j.f.steiner@uu.nl | www.uu.nl/staff/jfsteiner | www.mountainhydrology.org
################################################################################
# clear entire workspace (excl. packages)
rm(list = ls())
gc()
# define &-sign for pasting string-elements
'&' <- function(...) UseMethod('&')
'&.default' <- .Primitive('&')
'&.character' <- function(...) paste(...,sep='')
##################
# packages (if not installed yet: install.packages('examplePackage')
##################
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
library(foreach)
library(lubridate)
library(compare)
library(colorRamps)
library(data.table)
library(circular)
library(parallel)
library(snowfall)
library(truncnorm)
library(rlecuyer)
library(forecast)
# Create and specify the path of all files for the Model on your station. The folder needs the follwoing subfolders:
# 'Code','Figures','Data','Temp', 'Output'
path <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB'
path_code <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB\\Code'
path_figs <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB\\Figures'
path_data <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB\\Data'
path_temp <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB\\Temp'
path_output <- 'F:\\PHD\\Research\\Collaborations\\EMiles\\CaseStudies_EB\\Output'
path_subcode <- 'F:\\PHD\\Research\\EB_DCG\\DistributedEB\\Code\\subCodes\\'
#################
# Paths for Extra Codes
#library(R.utils)
#sourceDirectory(path_code)
# Paths for Extra Codes
file.sources = list.files(path_subcode,
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
sapply(file.sources,source,.GlobalEnv)
##################
# File Paths/File Names and basic Settings
##################
climData <- 'AWS_Suldenferner_2016.csv'       # Climate Data File
paramData <- 'Params_5000.csv'              # Parameter Data File
##### only for
glacCharacFile <- 'GlacierCharac.csv'
abbrev <- 'SUL'
glacCharac <- read.csv(path_data&'\\'&glacCharacFile,header = T)
idCharac <- which(glacCharac$GLA==abbrev)
location<-abbrev                        # Location Name for outputs
StationName <- abbrev;                  # on-glacier Station
yearTS <- 2016                             # Year of measurements (if more than one give first year, will be disabled)
lat <- glacCharac$LAT[idCharac]
lon <- glacCharac$LON[idCharac]
# Define whether station is located on a clean ice ('clean'), debris-covered ('debris') glacier or off-glacier ('off')
station_loc <- 'debris'
# specify height of T_a and ws sensor (assumed height is 2 m)
sh_Ta <- 2;
sh_ws <- 2;
# set start and end date of calculation of EB
EBstart <- glacCharac$SIMSTART[idCharac]
EBend <- glacCharac$SIMEND[idCharac]
# for the case of wet/dry seasons turn the following on and specifiy end/start dates
seasonsDyn <- 'off';                        # choose variable seasons (1 dry, 1 wet, 1 dry)
monin <<- '06/15'                           # define beginning of wet season
monout <<- '09/19'                          # define end of wet season
winin <<- '1/1'                             # define end of second dry season
winout <<- '02/28'                          # define beginning of first dry season
albedoDyn <<- 'const';                      # choose whether a constant albedo value ('const') or a time series is used ('var')
# ========================
#  % PARAMETERS/VARIABLES (may change across sites; EDIT ACCORDING TO FIELDSITE)
# ========================
# CONSTANTS (not likely to change across different sites)
grav <<- 9.81;               # Gravitational acceleration (m s^-2)
k_vk <<- 0.41;                # Von Karman's constant
sigma_sb <<- 5.67e-8;            # Stefan-Boltzmann constant (W m^-2 K^-4)
Rgas <<- 8.31447;             # Gas constant (J mol^-1 K^-1)
Mair <<- 0.0289644;           # Molar mass of dry air (kg mol^-1)
p0 <<- 101325;                # Standard sea level pressure (Pa)
T0 <<- 288.15;                # Standard sea level temperature (K)
L_v <<- 2476000;              # Latent heat of vaporization of water (J kg^-1)
L_f <<- 334000;               # Latent heat of fusion of water (J kg^-1)
rho_w <<- 999.7;              # Density of water (kg m^-3)
rho_i <<- 915;                 # Density of ice (kg m^-3)
c_w <<- 4181.3;               # Specific heat capacity of water (J kg^-1 K^-1)
c_ad <<- 1005;                # Specific heat capacity of air at constant humidity (J kg^-1 K^-1)
T_f <<- 273.15;                    # Freezing point of water (C)
# VARIABLES (to be edited; EDIT ACCORDING TO FIELDSITE)
timestep <<- 3600;           # Model timestep (s)
altitude <<- glacCharac$ELE[idCharac];           # Altitude of measurement site (m)
z_a <<- 2.00;                # % Height of air temp / wind / humidity measurements (m)
z_0 <<- 0.03;               # % Debris aerodynamic roughness length (m)
Lapse <<- 0.0065;            # % Temperature lapse rate (K m^-1)
k_d_wet <<- 1.55;             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_wet_range <- c(1.40,1.70);# possible range for k_d_wet (based on Nicholson & Benn 2012)
k_d_dry <<- 1.04;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
k_d_dry_range <- c(0.94,1.14);    # possible range for k_d (based on Nicholson & Benn 2012)
rho_d <<- 1496;               # Debris density (kg m^-3)
rho_d_range <- c(1000,1900);  # range for rho_d; 1496 (Reid & Brock 2010), 2700 (Nicholson & Benn 2012)
c_d <<- 948;                  # Debris specific heat capacity (J kg^-1 K^-1)
c_d_range <- c(850,1045);     # range for c_d
epsilon_d <<- 0.94;           # Debris emissivity
epsilon_d_range <- c(0.92,0.97); # range for epsilon_d
albedo_const <- 0.15;        # Debris albedo (will be calculated if dynamic version is chosen)
# Calculate air pressure in Pa based on altitude
p_a <- p0*((1-(Lapse*altitude/T0))^(grav*Mair/(Rgas*Lapse)));
# Variable parameter space
paramInput <- read.csv(path_data&'\\'&paramData,header = T)
# Open AWS Data Sheet
climInput <- read.csv(path_data&'\\'&climData,header = T)
Sys.setenv(TZ='UTC')
climInput$Time_Str <- as.POSIXct(paste(as.character(climInput$Date),as.character(climInput$Time)), format="%m/%d/%Y  %H:%M:%S")
climInput$Time_Num <- as.numeric(climInput$Time_Str)
# find IDs to limit the time series of calculation
modstart <- as.POSIXct(EBstart, format="%m/%d/%Y  %H:%M")
modend <- as.POSIXct(EBend, format="%m/%d/%Y  %H:%M")
IDstart <- which(!is.na(match(climInput$Time_Str,modstart)))
IDend <- which(!is.na(match(climInput$Time_Str,modend)))
#########
# Read all data into Structure
# #######
EBCoreInput <- list()
# scale wind speeds to different sensor height
climInput$ws_corr <- climInput$ws*(log(sh_ws)/log(2))
EBCoreInput$SWin <- TSaggregate(climInput$SWin,climInput$Time_Str,60,yearTS,'mean')[,2]            # Downwelling shortwave radiation (W m^-2)
EBCoreInput$SWout <- TSaggregate(climInput$SWout,climInput$Time_Str,60,yearTS,'mean')[,2]             # Upwelling shortwave radiation (W m^-2)
EBCoreInput$LWin <-TSaggregate(climInput$LWin,climInput$Time_Str,60,yearTS,'mean')[,2]              # Downwelling longwave radiation (W m^-2)
EBCoreInput$LWout <- TSaggregate(climInput$LWout,climInput$Time_Str,60,yearTS,'mean')[,2]             # Upwelling longwave radiation (W m^-2)
EBCoreInput$T_s_data <- (EBCoreInput$LWout/5.67/10^(-8)/1)^(1/4);	    # Surface temperature (K)
EBCoreInput$T_a <- TSaggregate(climInput$Ta,climInput$Time_Str,60,yearTS,'mean')[,2] + 273.15;      	    # Air temperature (K)
EBCoreInput$u <- TSaggregate(climInput$ws_corr,climInput$Time_Str,60,yearTS,'mean')[,2]                     # Wind speed (m s^-1)
EBCoreInput$wd <- TSaggregate(climInput$wd,climInput$Time_Str,60,yearTS,'mean')[,2]
EBCoreInput$RH_a <- TSaggregate(climInput$rH,climInput$Time_Str,60,yearTS,'mean')[,2]          # Air relative humidity (%)
EBCoreInput$RH_a[EBCoreInput$RH_a>100] <- 100
EBCoreInput$p_a <- p_a +  EBCoreInput$RH_a* 0         # Air pressure (kPa)
if(!is.null(climInput$pa)){
EBCoreInput$p_a <- TSaggregate(climInput$pa,climInput$Time_Str,60,yearTS,'mean')[,2] * 100
}
EBCoreInput$mod <- station_loc;                             # type of model (debris/clean ice/pond/cliff)
EBCoreInput$lat <- lat;
EBCoreInput$lon <- lon;
EBCoreInput$timeline_str <- as.POSIXct(TSaggregate(climInput$SWin,climInput$Time_Str,60,yearTS,'mean')[,1],origin = "1970-01-01")
EBCoreInput$mod <- 'debris'
EBModType <<- 'no_TS'
i<-1
paramInput$z_0_d..m.
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg.1.K.1.[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
source("F:\\PHD\\Research\\EB_DCG\\DistributedEB\\Code\\subCodes\\EBModCore.R")
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg.1.K.1.[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
source("F:\\PHD\\Research\\EB_DCG\\DistributedEB\\Code\\subCodes\\EBModCore.R")
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg.1.K.1.[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
source("F:\\PHD\\Research\\EB_DCG\\DistributedEB\\Code\\subCodes\\EBModCore.R")
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg.1.K.1.[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
Ts
EBCoreInput$LWin
EBCoreInput$SWin
EBCoreInput$SWout
EBCoreInput$LWout
EBCoreInput$T_a
EBCoreInput$u
EBCoreInput$RH_a
EBCoreInput$p_a
while (abs(Ts[n]-Ts[n-1]) > 0.01 && n<100 && !is.na(Ts[n])){
breakID <- 0
stop = FALSE
# Calculate ice temperature profile for the necessary values
# NOTE: The function 'debristemp.m' must be saved in the same directory as this routine
#browser()
Td <- debristemp(Ts[n],T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f);
Td_plus <- debristemp(Ts[n]+CDrange,T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f);
Td_minus <- debristemp(Ts[n]-CDrange,T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f)
}
breakID <- 0
stop = FALSE
# Calculate ice temperature profile for the necessary values
# NOTE: The function 'debristemp.m' must be saved in the same directory as this routine
#browser()
Td <- debristemp(Ts[n],T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f);
Td_plus <- debristemp(Ts[n]+CDrange,T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f);
Td_minus <- debristemp(Ts[n]-CDrange,T_s[t],T_d[t,],rho_d,c_d,h,timestep,N,k_d[t],T_f);
T_s
T_d
rho_d
c_d
paramInput$c_d..J.kg...1..K...1..
paramInput$z_0_d..m.[i]
paramInput$k_d..W.m...1..K...1..[i]
paramInput$rho_r..kg.m...3..[i]
paramInput$c_d..J.kg.1.K.1.[i]
paramInput$eps_d....
paramInput$alpha_d....
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
source("F:\\PHD\\Research\\EB_DCG\\DistributedEB\\Code\\subCodes\\EBModCore.R")
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
CDrange <<- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput)
EBModRes
plot(EBModRes[,1])
plot(EBModRes[,2])
plot(EBModRes[,3])
plot(EBModRes[,4])
for(i in 1:10){
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
CDrange <<- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
EBModRes <-  EBModCore(EBCoreInput);
}
paramInput$d..m.
MultiCore_EB <- function(i){
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput);
print(paste("Actual Progress:", floor(i/10*100),"%"))
write((EBModRes[,3]),path_temp&'\\T_s_run_'&i&'.txt',ncolumns=1)    # temporary save file for T_surf
write((EBModRes[,1]),path_temp&'\\melt_run_'&i&'.txt',ncolumns=1)   # temporary save file for melt
write((EBModRes[,dim(EBModRes)[2]]),path_temp&'\\refreeze_run_'&i&'.txt',ncolumns=1)   # temporary save file for refreeze
write((EBModRes[,7]),path_temp&'\\Snet_run_'&i&'.txt',ncolumns=1)   # temporary save file for net solar
write((EBModRes[,8]),path_temp&'\\Lnet_run_'&i&'.txt',ncolumns=1)   # temporary save file for net longwave
write((EBModRes[,10]+EBModRes[,11]),path_temp&'\\Turb_run_'&i&'.txt',ncolumns=1)   # temporary save file for turb
write((EBModRes[,10]),path_temp&'\\QH_run_'&i&'.txt',ncolumns=1)   # temporary save file for sensible
write((EBModRes[,11]),path_temp&'\\QLE_run_'&i&'.txt',ncolumns=1)   # temporary save file for latent
}
# number of workers (leave one to keep system more responsive)
nworkers <- detectCores()-0
# run entire function parallelized
sfInit(parallel=T,cpu=nworkers, type="SOCK")                                                # initialize cluster
loadlib <- lapply(c('raster','truncnorm'),                                                  # load required packages in cluster
function(x) sfLibrary(x, character.only=T))
sfExportAll()                                                                               # transfer all variables to clusters
sfClusterSetupRNG()                                                                         # set up random number generator
tout.multi <- system.time(
out <- sfLapply(paramInput$RunNo....[1:5000], MultiCore_EB)
)
MultiCore_EB <- function(i){
z_0 <<- paramInput$z_0_d..m.[i];               # % Debris aerodynamic roughness length (m)
k_d_wet <<- paramInput$k_d..W.m...1..K...1..[i];             # Debris thermal conductivity wet season (W m^-1 K^-1)
k_d_dry <<- k_d_wet;                 # Debris thermal conductivity dry season (W m^-1 K^-1)
rho_d <<- paramInput$rho_r..kg.m...3..[i];               # Debris density (kg m^-3)
c_d <<- paramInput$c_d..J.kg...1..K...1..[i];                  # Debris specific heat capacity (J kg^-1 K^-1)
epsilon_d <<- paramInput$eps_d....[i];           # Debris emissivity
EBCoreInput$albedo_d <- paramInput$alpha_d....[i];        # Debris albedo (will be calculated if dynamic version is chosen)
# Debris Layers
d <- paramInput$d..m.[i]
range <- 0.5;                   # Range for central difference calculation of the derivative of surface flux when calculating surface temperature T_s.
N <<- floor(d/0.10);             # Number of layers used for debris temperature calculation (chosen to make each layer 1cm deep)
if(N<10){N <<- 10}               # Set minimum number of layers = 10
#N <- 4
h <<- d/N;                       # Size of each layer in calculation
EBModRes <-  EBModCore(EBCoreInput);
print(paste("Actual Progress:", floor(i/10*100),"%"))
write((EBModRes[,3]),path_temp&'\\T_s_run_'&i&'.txt',ncolumns=1)    # temporary save file for T_surf
write((EBModRes[,1]),path_temp&'\\melt_run_'&i&'.txt',ncolumns=1)   # temporary save file for melt
write((EBModRes[,dim(EBModRes)[2]]),path_temp&'\\refreeze_run_'&i&'.txt',ncolumns=1)   # temporary save file for refreeze
write((EBModRes[,7]),path_temp&'\\Snet_run_'&i&'.txt',ncolumns=1)   # temporary save file for net solar
write((EBModRes[,8]),path_temp&'\\Lnet_run_'&i&'.txt',ncolumns=1)   # temporary save file for net longwave
#write((EBModRes[,10]+EBModRes[,11]),path_temp&'\\Turb_run_'&i&'.txt',ncolumns=1)   # temporary save file for turb
write((EBModRes[,10]),path_temp&'\\QH_run_'&i&'.txt',ncolumns=1)   # temporary save file for sensible
write((EBModRes[,11]),path_temp&'\\QLE_run_'&i&'.txt',ncolumns=1)   # temporary save file for latent
}
# number of workers (leave one to keep system more responsive)
nworkers <- detectCores()-0
# run entire function parallelized
sfInit(parallel=T,cpu=nworkers, type="SOCK")                                                # initialize cluster
loadlib <- lapply(c('raster','truncnorm'),                                                  # load required packages in cluster
function(x) sfLibrary(x, character.only=T))
sfExportAll()                                                                               # transfer all variables to clusters
sfClusterSetupRNG()                                                                         # set up random number generator
tout.multi <- system.time(
out <- sfLapply(paramInput$RunNo....[1:5000], MultiCore_EB)
)
